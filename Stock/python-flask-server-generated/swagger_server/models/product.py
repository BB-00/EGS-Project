# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Product(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, product_id: int=None, lim: int=None, offset: int=None, name: str=None, reference: int=None, quantity: int=None, size: int=None):  # noqa: E501
        """Product - a model defined in Swagger

        :param product_id: The product_id of this Product.  # noqa: E501
        :type product_id: int
        :param lim: The lim of this Product.  # noqa: E501
        :type lim: int
        :param offset: The offset of this Product.  # noqa: E501
        :type offset: int
        :param name: The name of this Product.  # noqa: E501
        :type name: str
        :param reference: The reference of this Product.  # noqa: E501
        :type reference: int
        :param quantity: The quantity of this Product.  # noqa: E501
        :type quantity: int
        :param size: The size of this Product.  # noqa: E501
        :type size: int
        """
        self.swagger_types = {
            'product_id': int,
            'lim': int,
            'offset': int,
            'name': str,
            'reference': int,
            'quantity': int,
            'size': int
        }

        self.attribute_map = {
            'product_id': 'product_ID',
            'lim': 'lim',
            'offset': 'offset',
            'name': 'name',
            'reference': 'reference',
            'quantity': 'quantity',
            'size': 'size'
        }
        self._product_id = product_id
        self._lim = lim
        self._offset = offset
        self._name = name
        self._reference = reference
        self._quantity = quantity
        self._size = size

    @classmethod
    def from_dict(cls, dikt) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Product of this Product.  # noqa: E501
        :rtype: Product
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self) -> int:
        """Gets the product_id of this Product.

        product id  # noqa: E501

        :return: The product_id of this Product.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this Product.

        product id  # noqa: E501

        :param product_id: The product_id of this Product.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def lim(self) -> int:
        """Gets the lim of this Product.

        number of items to return  # noqa: E501

        :return: The lim of this Product.
        :rtype: int
        """
        return self._lim

    @lim.setter
    def lim(self, lim: int):
        """Sets the lim of this Product.

        number of items to return  # noqa: E501

        :param lim: The lim of this Product.
        :type lim: int
        """

        self._lim = lim

    @property
    def offset(self) -> int:
        """Gets the offset of this Product.

        number of items to skip before starting  # noqa: E501

        :return: The offset of this Product.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this Product.

        number of items to skip before starting  # noqa: E501

        :param offset: The offset of this Product.
        :type offset: int
        """

        self._offset = offset

    @property
    def name(self) -> str:
        """Gets the name of this Product.

        name of the product  # noqa: E501

        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Product.

        name of the product  # noqa: E501

        :param name: The name of this Product.
        :type name: str
        """

        self._name = name

    @property
    def reference(self) -> int:
        """Gets the reference of this Product.

        reference of the product  # noqa: E501

        :return: The reference of this Product.
        :rtype: int
        """
        return self._reference

    @reference.setter
    def reference(self, reference: int):
        """Sets the reference of this Product.

        reference of the product  # noqa: E501

        :param reference: The reference of this Product.
        :type reference: int
        """

        self._reference = reference

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Product.

        quantity of the product  # noqa: E501

        :return: The quantity of this Product.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Product.

        quantity of the product  # noqa: E501

        :param quantity: The quantity of this Product.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def size(self) -> int:
        """Gets the size of this Product.

        size of the product  # noqa: E501

        :return: The size of this Product.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this Product.

        size of the product  # noqa: E501

        :param size: The size of this Product.
        :type size: int
        """

        self._size = size
