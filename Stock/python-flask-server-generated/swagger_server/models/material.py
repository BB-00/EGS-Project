# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Material(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, materials_id: int=None, ofset: int=None, lim: int=None, name: str=None):  # noqa: E501
        """Material - a model defined in Swagger

        :param materials_id: The materials_id of this Material.  # noqa: E501
        :type materials_id: int
        :param ofset: The ofset of this Material.  # noqa: E501
        :type ofset: int
        :param lim: The lim of this Material.  # noqa: E501
        :type lim: int
        :param name: The name of this Material.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'materials_id': int,
            'ofset': int,
            'lim': int,
            'name': str
        }

        self.attribute_map = {
            'materials_id': 'materials_ID',
            'ofset': 'ofset',
            'lim': 'lim',
            'name': 'name'
        }
        self._materials_id = materials_id
        self._ofset = ofset
        self._lim = lim
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Material':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Material of this Material.  # noqa: E501
        :rtype: Material
        """
        return util.deserialize_model(dikt, cls)

    @property
    def materials_id(self) -> int:
        """Gets the materials_id of this Material.

        materials id  # noqa: E501

        :return: The materials_id of this Material.
        :rtype: int
        """
        return self._materials_id

    @materials_id.setter
    def materials_id(self, materials_id: int):
        """Sets the materials_id of this Material.

        materials id  # noqa: E501

        :param materials_id: The materials_id of this Material.
        :type materials_id: int
        """

        self._materials_id = materials_id

    @property
    def ofset(self) -> int:
        """Gets the ofset of this Material.

        number of items to skip before starting  # noqa: E501

        :return: The ofset of this Material.
        :rtype: int
        """
        return self._ofset

    @ofset.setter
    def ofset(self, ofset: int):
        """Sets the ofset of this Material.

        number of items to skip before starting  # noqa: E501

        :param ofset: The ofset of this Material.
        :type ofset: int
        """

        self._ofset = ofset

    @property
    def lim(self) -> int:
        """Gets the lim of this Material.

        number of items to return  # noqa: E501

        :return: The lim of this Material.
        :rtype: int
        """
        return self._lim

    @lim.setter
    def lim(self, lim: int):
        """Sets the lim of this Material.

        number of items to return  # noqa: E501

        :param lim: The lim of this Material.
        :type lim: int
        """

        self._lim = lim

    @property
    def name(self) -> str:
        """Gets the name of this Material.

        name of the category  # noqa: E501

        :return: The name of this Material.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Material.

        name of the category  # noqa: E501

        :param name: The name of this Material.
        :type name: str
        """

        self._name = name
