# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProductsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, product_id: int=None, name: str=None, size: int=None, material: int=None, provider: int=None, product_type: int=None, reference: int=None, quantity: int=None, buy_price: float=None):  # noqa: E501
        """ProductsBody - a model defined in Swagger

        :param product_id: The product_id of this ProductsBody.  # noqa: E501
        :type product_id: int
        :param name: The name of this ProductsBody.  # noqa: E501
        :type name: str
        :param size: The size of this ProductsBody.  # noqa: E501
        :type size: int
        :param material: The material of this ProductsBody.  # noqa: E501
        :type material: int
        :param provider: The provider of this ProductsBody.  # noqa: E501
        :type provider: int
        :param product_type: The product_type of this ProductsBody.  # noqa: E501
        :type product_type: int
        :param reference: The reference of this ProductsBody.  # noqa: E501
        :type reference: int
        :param quantity: The quantity of this ProductsBody.  # noqa: E501
        :type quantity: int
        :param buy_price: The buy_price of this ProductsBody.  # noqa: E501
        :type buy_price: float
        """
        self.swagger_types = {
            'product_id': int,
            'name': str,
            'size': int,
            'material': int,
            'provider': int,
            'product_type': int,
            'reference': int,
            'quantity': int,
            'buy_price': float
        }

        self.attribute_map = {
            'product_id': 'product_ID',
            'name': 'name',
            'size': 'size',
            'material': 'material',
            'provider': 'provider',
            'product_type': 'product_type',
            'reference': 'reference',
            'quantity': 'quantity',
            'buy_price': 'buy_price'
        }
        self._product_id = product_id
        self._name = name
        self._size = size
        self._material = material
        self._provider = provider
        self._product_type = product_type
        self._reference = reference
        self._quantity = quantity
        self._buy_price = buy_price

    @classmethod
    def from_dict(cls, dikt) -> 'ProductsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The products_body of this ProductsBody.  # noqa: E501
        :rtype: ProductsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self) -> int:
        """Gets the product_id of this ProductsBody.


        :return: The product_id of this ProductsBody.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """Sets the product_id of this ProductsBody.


        :param product_id: The product_id of this ProductsBody.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def name(self) -> str:
        """Gets the name of this ProductsBody.


        :return: The name of this ProductsBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProductsBody.


        :param name: The name of this ProductsBody.
        :type name: str
        """

        self._name = name

    @property
    def size(self) -> int:
        """Gets the size of this ProductsBody.


        :return: The size of this ProductsBody.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this ProductsBody.


        :param size: The size of this ProductsBody.
        :type size: int
        """

        self._size = size

    @property
    def material(self) -> int:
        """Gets the material of this ProductsBody.


        :return: The material of this ProductsBody.
        :rtype: int
        """
        return self._material

    @material.setter
    def material(self, material: int):
        """Sets the material of this ProductsBody.


        :param material: The material of this ProductsBody.
        :type material: int
        """

        self._material = material

    @property
    def provider(self) -> int:
        """Gets the provider of this ProductsBody.


        :return: The provider of this ProductsBody.
        :rtype: int
        """
        return self._provider

    @provider.setter
    def provider(self, provider: int):
        """Sets the provider of this ProductsBody.


        :param provider: The provider of this ProductsBody.
        :type provider: int
        """

        self._provider = provider

    @property
    def product_type(self) -> int:
        """Gets the product_type of this ProductsBody.


        :return: The product_type of this ProductsBody.
        :rtype: int
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type: int):
        """Sets the product_type of this ProductsBody.


        :param product_type: The product_type of this ProductsBody.
        :type product_type: int
        """

        self._product_type = product_type

    @property
    def reference(self) -> int:
        """Gets the reference of this ProductsBody.


        :return: The reference of this ProductsBody.
        :rtype: int
        """
        return self._reference

    @reference.setter
    def reference(self, reference: int):
        """Sets the reference of this ProductsBody.


        :param reference: The reference of this ProductsBody.
        :type reference: int
        """

        self._reference = reference

    @property
    def quantity(self) -> int:
        """Gets the quantity of this ProductsBody.


        :return: The quantity of this ProductsBody.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this ProductsBody.


        :param quantity: The quantity of this ProductsBody.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def buy_price(self) -> float:
        """Gets the buy_price of this ProductsBody.


        :return: The buy_price of this ProductsBody.
        :rtype: float
        """
        return self._buy_price

    @buy_price.setter
    def buy_price(self, buy_price: float):
        """Sets the buy_price of this ProductsBody.


        :param buy_price: The buy_price of this ProductsBody.
        :type buy_price: float
        """

        self._buy_price = buy_price
