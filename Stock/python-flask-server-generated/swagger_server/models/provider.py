# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Provider(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, providers_id: int=None, ofset: int=None, lim: int=None, name: str=None, address: str=None, email: str=None, site: str=None, phone: int=None):  # noqa: E501
        """Provider - a model defined in Swagger

        :param providers_id: The providers_id of this Provider.  # noqa: E501
        :type providers_id: int
        :param ofset: The ofset of this Provider.  # noqa: E501
        :type ofset: int
        :param lim: The lim of this Provider.  # noqa: E501
        :type lim: int
        :param name: The name of this Provider.  # noqa: E501
        :type name: str
        :param address: The address of this Provider.  # noqa: E501
        :type address: str
        :param email: The email of this Provider.  # noqa: E501
        :type email: str
        :param site: The site of this Provider.  # noqa: E501
        :type site: str
        :param phone: The phone of this Provider.  # noqa: E501
        :type phone: int
        """
        self.swagger_types = {
            'providers_id': int,
            'ofset': int,
            'lim': int,
            'name': str,
            'address': str,
            'email': str,
            'site': str,
            'phone': int
        }

        self.attribute_map = {
            'providers_id': 'providers_ID',
            'ofset': 'ofset',
            'lim': 'lim',
            'name': 'name',
            'address': 'address',
            'email': 'email',
            'site': 'site',
            'phone': 'phone'
        }
        self._providers_id = providers_id
        self._ofset = ofset
        self._lim = lim
        self._name = name
        self._address = address
        self._email = email
        self._site = site
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt) -> 'Provider':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Provider of this Provider.  # noqa: E501
        :rtype: Provider
        """
        return util.deserialize_model(dikt, cls)

    @property
    def providers_id(self) -> int:
        """Gets the providers_id of this Provider.

        provider id  # noqa: E501

        :return: The providers_id of this Provider.
        :rtype: int
        """
        return self._providers_id

    @providers_id.setter
    def providers_id(self, providers_id: int):
        """Sets the providers_id of this Provider.

        provider id  # noqa: E501

        :param providers_id: The providers_id of this Provider.
        :type providers_id: int
        """

        self._providers_id = providers_id

    @property
    def ofset(self) -> int:
        """Gets the ofset of this Provider.

        number of items to skip before starting  # noqa: E501

        :return: The ofset of this Provider.
        :rtype: int
        """
        return self._ofset

    @ofset.setter
    def ofset(self, ofset: int):
        """Sets the ofset of this Provider.

        number of items to skip before starting  # noqa: E501

        :param ofset: The ofset of this Provider.
        :type ofset: int
        """

        self._ofset = ofset

    @property
    def lim(self) -> int:
        """Gets the lim of this Provider.

        number of items to return  # noqa: E501

        :return: The lim of this Provider.
        :rtype: int
        """
        return self._lim

    @lim.setter
    def lim(self, lim: int):
        """Sets the lim of this Provider.

        number of items to return  # noqa: E501

        :param lim: The lim of this Provider.
        :type lim: int
        """

        self._lim = lim

    @property
    def name(self) -> str:
        """Gets the name of this Provider.

        name of provider  # noqa: E501

        :return: The name of this Provider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Provider.

        name of provider  # noqa: E501

        :param name: The name of this Provider.
        :type name: str
        """

        self._name = name

    @property
    def address(self) -> str:
        """Gets the address of this Provider.

        address of provider  # noqa: E501

        :return: The address of this Provider.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Provider.

        address of provider  # noqa: E501

        :param address: The address of this Provider.
        :type address: str
        """

        self._address = address

    @property
    def email(self) -> str:
        """Gets the email of this Provider.

        email of provider  # noqa: E501

        :return: The email of this Provider.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Provider.

        email of provider  # noqa: E501

        :param email: The email of this Provider.
        :type email: str
        """

        self._email = email

    @property
    def site(self) -> str:
        """Gets the site of this Provider.

        site of provider  # noqa: E501

        :return: The site of this Provider.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site: str):
        """Sets the site of this Provider.

        site of provider  # noqa: E501

        :param site: The site of this Provider.
        :type site: str
        """

        self._site = site

    @property
    def phone(self) -> int:
        """Gets the phone of this Provider.

        phone number of the provider  # noqa: E501

        :return: The phone of this Provider.
        :rtype: int
        """
        return self._phone

    @phone.setter
    def phone(self, phone: int):
        """Sets the phone of this Provider.

        phone number of the provider  # noqa: E501

        :param phone: The phone of this Provider.
        :type phone: int
        """

        self._phone = phone
